(function () {
    let configuration_interval;
    let configuration_timeout = 0;
    const $progress_bar = $(".progress-bar");
    const bootstrapModalConfig = { keyboard: false, backdrop: "static" };

    // Initialize modals
    const modals = {
        addModal: new bootstrap.Modal(document.getElementById("add_modal"), bootstrapModalConfig),
        deleteBulkModal: new bootstrap.Modal(document.getElementById("delete_bulk_modal"), bootstrapModalConfig),
        ipModal: new bootstrap.Modal(document.getElementById("available_ip_modal"), bootstrapModalConfig),
        qrcodeModal: new bootstrap.Modal(document.getElementById("qrcode_modal"), bootstrapModalConfig),
        settingModal: new bootstrap.Modal(document.getElementById("setting_modal"), bootstrapModalConfig),
        deleteModal: new bootstrap.Modal(document.getElementById("delete_modal"), bootstrapModalConfig),
    };

    // Initialize tooltips and popovers
    $("[data-toggle='tooltip']").tooltip();
    $("[data-toggle='popover']").popover();

    // Helper function to create alerts
    function createAlert(message, type = "warning") {
        const alert = document.createElement("div");
        alert.classList.add("alert", `alert-${type}`);
        alert.setAttribute("role", "alert");
        alert.innerHTML = message;
        return alert;
    }

    // Display configuration alerts
    function configurationAlert(response) {
        const alertContainer = document.querySelector("#config_info_alert");
        if (response.listen_port === "" && response.status === "stopped") {
            alertContainer.appendChild(createAlert(
                "Peer QR Code and configuration file download require a specified <strong>Listen Port</strong>."
            ));
        }
        if (response.conf_address === "N/A") {
            alertContainer.appendChild(createAlert(
                "Configuration <strong>Address</strong> needs to be specified to allow peers to connect."
            ));
        }
    }

    // Update configuration header
    function configurationHeader(response) {
        const $conf_status_btn = document.getElementById("conf_status_btn");
        $conf_status_btn.innerHTML = `
            <a href="#" id="${response.name}" ${response.checked} class="switch text-primary">
                <i class="bi bi-toggle2-${response.checked === "checked" ? "on" : "off"}"></i> ${response.checked === "checked" ? "ON" : "OFF"}
            </a>`;
        $conf_status_btn.classList.remove("info_loading");

        // Update dropdowns and buttons
        document.querySelectorAll("#sort_by_dropdown option").forEach(ele => ele.removeAttribute("selected"));
        document.querySelector(`#sort_by_dropdown option[value="${response.sort_tag}"]`).setAttribute("selected", "selected");

        document.querySelectorAll(".interval-btn-group button").forEach(ele => ele.classList.remove("active"));
        document.querySelector(`button[data-refresh-interval="${response.dashboard_refresh_interval}"]`).classList.add("active");

        document.querySelectorAll(".display-btn-group button").forEach(ele => ele.classList.remove("active"));
        document.querySelector(`button[data-display-mode="${response.peer_display_mode}"]`).classList.add("active");

        // Update status and statistics
        document.querySelector("#conf_status").innerHTML = `${response.status}<span class="dot dot-${response.status}"></span>`;
        document.querySelector("#conf_connected_peers").innerHTML = response.running_peer;
        document.querySelector("#conf_total_data_usage").innerHTML = `${response.total_data_usage[0]} GB`;
        document.querySelector("#conf_total_data_received").innerHTML = `${response.total_data_usage[2]} GB`;
        document.querySelector("#conf_total_data_sent").innerHTML = `${response.total_data_usage[1]} GB`;
        document.querySelector("#conf_public_key").innerHTML = response.public_key;
        document.querySelector("#conf_listen_port").innerHTML = response.listen_port || "N/A";
        document.querySelector("#conf_address").innerHTML = response.conf_address;

        document.querySelectorAll(".info h6").forEach(ele => ele.classList.remove("info_loading"));
    }

    // Render peers
    function configurationPeers(response) {
        const peerListContainer = document.querySelector(".peer_list");
        if (response.peer_data.length === 0) {
            peerListContainer.innerHTML = `
                <div class="col-12" style="text-align: center; margin-top: 1.5rem">
                    <h3 class="text-muted">Oops! No peers found ‘︿’</h3>
                </div>`;
            return;
        }

        const displayMode = response.peer_display_mode === "list" ? "col-12" : "col-sm-6 col-lg-4";
        let result = "";

        response.peer_data.forEach(peer => {
            const totalReceive = peer.cumu_receive + peer.total_receive;
            const totalSent = peer.cumu_sent + peer.total_sent;

            const peerHtml = `
                <div class="${displayMode}" data-id="${peer.id}">
                    <div class="card mb-3 card-${peer.status}">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-sm display" style="display: flex; align-items: center; margin-bottom: 0.2rem">
                                    <h5 style="margin: 0; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                        ${peer.name || "Untitled"}
                                    </h5>
                                    <h6 style="text-transform: uppercase; margin: 0; margin-left: auto !important;">
                                        <span class="dot dot-${peer.status}" style="margin-left: auto !important;" data-toggle="tooltip" data-placement="left" title="Peer Connected"></span>
                                    </h6>
                                </div>
                                <div class="w-100"></div>
                                <div class="col-12 peer_data_group" style="text-align: right; display: flex; margin-bottom: 0.5rem">
                                    <p class="text-primary" style="text-transform: uppercase; margin-bottom: 0; margin-right: 1rem">
                                        <small><i class="bi bi-arrow-down-right"></i> ${roundN(totalReceive, 4)} GB</small>
                                    </p>
                                    <p class="text-success" style="text-transform: uppercase; margin-bottom: 0">
                                        <small><i class="bi bi-arrow-up-right"></i> ${roundN(totalSent, 4)} GB</small>
                                    </p>
                                </div>
                                <!-- Additional peer details -->
                                ...
                            </div>
                        </div>
                    </div>
                </div>`;
            result += peerHtml;
        });

        peerListContainer.innerHTML = result;

        // Refresh interval handling
        if (response.dashboard_refresh_interval !== configuration_timeout) {
            configuration_timeout = response.dashboard_refresh_interval;
            removeConfigurationInterval();
            setConfigurationInterval();
        }
    }

    // Utility functions
    function roundN(value, digits) {
        const tenToN = 10 ** digits;
        return Math.round(value * tenToN) / tenToN;
    }

    function setConfigurationInterval() {
        configuration_interval = setInterval(() => loadPeers($("#search_peer_textbox").val()), configuration_timeout);
    }

    function removeConfigurationInterval() {
        clearInterval(configuration_interval);
    }

    // Load peers
    function loadPeers(searchString) {
        startProgressBar();
        const startTime = new Date();

        $.ajax({
            method: "GET",
            url: `/get_config/${conf_name}?search=${encodeURIComponent(searchString)}`,
            headers: { "Content-Type": "application/json" },
        })
            .done(response => {
                removeNoResponding();
                configurationAlert(response);
                configurationHeader(response);
                configurationPeers(response);
                $(".dot.dot-running").attr("title", "Peer Connected").tooltip();
                $(".dot.dot-stopped").attr("title", "Peer Disconnected").tooltip();
                $("i[data-toggle='tooltip']").tooltip();
                endProgressBar();

                const endTime = new Date();
                const elapsedTime = endTime - startTime;
                console.log(`Peer Loading Time: ${elapsedTime}ms`);
                $("#peer_loading_time").html(`Peer Loading Time: ${elapsedTime}ms`);
            })
            .fail(noResponding);
    }

    // Progress bar handling
    function startProgressBar() {
        $progress_bar.css({
            width: "0%",
            opacity: "100",
            background: "linear-gradient(145deg, rgba(255,69,69,1) 0%, rgba(0,115,186,1) 100%)",
        }).css("width", "25%");
        setTimeout(stillLoadingProgressBar, 300);
    }

    function stillLoadingProgressBar() {
        $progress_bar.css("transition", "3s ease-in-out").css("width", "75%");
    }

    function endProgressBar() {
        $progress_bar.css("transition", "0.3s ease-in-out").css("width", "100%");
        setTimeout(() => $progress_bar.css("opacity", "0"), 250);
    }

    // No responding state
    function noResponding() {
        document.querySelectorAll(".no-response").forEach(ele => ele.classList.add("active"));
        setTimeout(() => {
            document.querySelectorAll(".no-response").forEach(ele => ele.classList.add("show"));
            document.querySelector("#right_body").classList.add("no-responding");
            document.querySelector(".navbar").classList.add("no-responding");
        }, 10);
    }

    function removeNoResponding() {
        document.querySelectorAll(".no-response").forEach(ele => ele.classList.remove("show"));
        document.querySelector("#right_body").classList.remove("no-responding");
        document.querySelector(".navbar").classList.remove("no-responding");
        setTimeout(() => {
            document.querySelectorAll(".no-response").forEach(ele => ele.classList.remove("active"));
        }, 1010);
    }

    // Expose configurations globally
    window.configurations = {
        ...modals,
        loadPeers,
        startProgressBar,
        stillLoadingProgressBar,
        endProgressBar,
        setConfigurationInterval,
        removeConfigurationInterval,
        // ...other methods
    };
})();
let $body = $("body");
let available_ips = [];
let $add_peer = document.getElementById("save_peer");

document.querySelector(".add_btn").addEventListener("click", () => {
    window.configurations.addModal().toggle();
});

document.querySelector(".info").addEventListener("click", event => {
    let selector = document.querySelector(".switch");
    if (selector.contains(event.target)) {
        selector.style.display = "none";
        document.querySelector("div[role=status]").style.display = "inline-block";
        location.replace(`/switch/${selector.getAttribute("id")}`);
    }
});

document.querySelector("#private_key").addEventListener("change", event => {
    let publicKey = document.querySelector("#public_key");
    if (event.target.value.length === 44) {
        publicKey.value = window.wireguard.generatePublicKey(event.target.value);